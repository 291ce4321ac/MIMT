function varargout = immodify(inpict,varargin)
%   OUTPICT=IMMODIFY(INPICT, {OPTIONS})
%	IMMODIFY(INPICT, {OPTIONS})
%       Modify images interactively via a simple graphical interface
%       
%       Color adjustment (RGB, HSL, LCHab, etc)
%       Levels & curves adjustment
%       Blur
%       Flip
%       Tone map
%       Vector means & extrema
%       Blockify (spatial downsample)
%       Random tile permutation
%       Glass tile effect
%       Dithers (7 types)
%       Line extraction
%
%   INPICT is an image 
%       Intended for RGB, RGBA images
%       Can also open single-channel images, but only a few modes are supported
%
%   Optional arguments are:
%   'invert' inverts the display of colors and images
%       This is used if using an inverted display
%   'imcomposemode' is not used in standalone operation
%
%   When called with no output arguments, IMMODIFY is non-blocking and will allow
%   multiple output assignments from within the GUI.
%
%   Default output class is double
%
%   View control follows the behavior of akZoom():
%      Zoom is controlled via mouse wheel
%      Left-click to zoom on a rectangular ROI
%      Middle-click to pan the view
%      Right-click to reset the view
%       
%   Tested on R2009b and R2015b (in Linux).  If it doesn't work in a different environment
%   don't be too terribly surprised.  It's still a little half-baked at the moment anyway.
%
%   See also: IMCOMPOSE, IMGENERATE, IMTWEAK, IMADJUST, TONEMAP, MEANLINES, BLOCKIFY, SHUFFLE, GLASSTILES, EOLINE, ZFDITHER, ORDDITHER, ARBORDDITHER, LINEDITHER

% TO DO:
% should protoimage replace inpict if mode is changed after a commit event? 
% commit kind of has different utility when used with imcompose
% consider other tools e.g. morphological, other

% this has become a colossal mess
% handling all the imtweak conditional behaviors alone is half the problem
% like every learning project, it eventually turns into an embarrassment demanding perpetual rewrites

if size(inpict,4) > 1
	error('IMMODIFY: 4D images are not supported')
end

for a = 1:1:length(varargin);
    if ischar(varargin{a})
		switch lower(varargin{a})
			case 'imcomposemode'
				imcomposemode = 1;
			case 'invert'
				invert = 1;
		end
    end
end

if ~exist('imcomposemode','var')
	imcomposemode = 0;
end

if ~exist('invert','var')
	invert = 0;
end

if nargout == 0 && ~imcomposemode
	nonblockingmode = true;
else
	nonblockingmode = false;
end

% implement singleton behavior ######################################################
h = findall(0,'tag','IMMODIFY_GUI');
if ~isempty(h)
	% raise window if already open
	figure(h);
else
	% ui data initialization
	msrgb = {'adjust color','levels','flip','blur','tonemap','vector means & extrema','blockify','shuffle','glass tiles','dither','erase lines','add border','crop border','color to alpha'};
	msbw = {'levels','flip','blur','vector means & extrema','blockify','shuffle','glass tiles','dither','erase lines','add border','crop border','color to alpha'};
	msnonimcompose = {'add border','crop border'}; % these modes change image geometry; can't use with imcompose
	thismode = 1;
	autopreview = 1;
	protoimage = [];
	inpict = imcast(inpict,'double');
	inpictlch = inpict;
	s = size(inpict);
	s = s(1:2);
	[numimchans hasalpha] = chancount(inpict);

	% parameters ######################################################
	TWMprops = { % this would probably be better as a struct, but using a giant array is easy to read and maintain
	% name		display		legacylabels						full labels		legacy ch	ishue		
	'rgb',		'RGB',		{'Red' 'Green' 'Blue'},				{'R' 'G' 'B'},	[1 3 5],	[0 0 0; 0 0 0]
	'hsl',		'HSL',		{'Hue' 'Saturation' 'Lightness'},	{'H' 'S' 'L'},	[2 3 5],	[1 0 0; 1 0 0]
	'hsv',		'HSV',		{'Hue' 'Saturation' 'Value'},		{'H' 'S' 'V'},	[2 3 5],	[1 0 0; 1 0 0]
	'hsi',		'HSI',		{'Hue' 'Saturation' 'Intensity'},	{'H' 'S' 'I'},	[2 3 5],	[1 0 0; 1 0 0]
	'hsy',		'HSY',		{'Hue' 'Saturation' 'Luma'},		{'H' 'S' 'L'},	[2 3 5],	[1 0 0; 1 0 0]
	'husluv',	'HuSLuv',	{'Hue' 'Saturation' 'Lightness'},	{'H' 'S' 'L'},	[2 3 5],	[1 0 0; 1 0 0]
	'huslab',	'HuSLab',	{'Hue' 'Saturation' 'Lightness'},	{'H' 'S' 'L'},	[2 3 5],	[1 0 0; 1 0 0]
	'huslok',	'HuSLok',	{'Hue' 'Saturation' 'Lightness'},	{'H' 'S' 'L'},	[2 3 5],	[1 0 0; 1 0 0]
	'hsyp',		'HSYp',		{'Hue' 'Saturation' 'Luma'},		{'H' 'S' 'L'},	[2 3 5],	[1 0 0; 1 0 0]
	'huslpuv',	'HuSLpuv',	{'Hue' 'Saturation' 'Lightness'},	{'H' 'S' 'L'},	[2 3 5],	[1 0 0; 1 0 0]
	'huslpab',	'HuSLpab',	{'Hue' 'Saturation' 'Lightness'},	{'H' 'S' 'L'},	[2 3 5],	[1 0 0; 1 0 0]
	'huslpok',	'HuSLpok',	{'Hue' 'Saturation' 'Lightness'},	{'H' 'S' 'L'},	[2 3 5],	[1 0 0; 1 0 0]
	'ych',		'YCHbr',	{'Luma' 'Chroma' 'Hue'},			{'Y' 'C' 'H'},	[1 3 6],	[0 0 1; 0 0 1]
	'lchuv',	'LCHuv',	{'Lightness' 'Chroma' 'Hue'},		{'L' 'C' 'H'},	[1 3 6],	[0 0 1; 0 0 1]
	'lchab',	'LCHab',	{'Lightness' 'Chroma' 'Hue'},		{'L' 'C' 'H'},	[1 3 6],	[0 0 1; 0 0 1]
	'lchsr',	'LCHsr',	{'Lightness' 'Chroma' 'Hue'},		{'L' 'C' 'H'},	[1 3 6],	[0 0 1; 0 0 1]
	'lchok',	'LCHok',	{'Lightness' 'Chroma' 'Hue'},		{'L' 'C' 'H'},	[1 3 6],	[0 0 1; 0 0 1]
	'ypbpr',	'YPbPr',	{'Luma' 'Pb' 'Pr'},					{'Y' 'Pb' 'Pr'},[1 3 5],	[0 0 0; 0 0 0]
	'luv',		'LUV',		{'Lightness' 'U' 'V'},				{'L' 'U' 'V'},	[1 3 5],	[0 0 0; 0 0 0]
	'lab',		'LAB',		{'Lightness' 'A' 'B'},				{'L' 'A' 'B'},	[1 3 5],	[0 0 0; 0 0 0]
	'srlab',	'SRLAB',	{'Lightness' 'A' 'B'},				{'L' 'A' 'B'},	[1 3 5],	[0 0 0; 0 0 0]
	'oklab',	'OKLAB',	{'Lightness' 'A' 'B'},				{'L' 'A' 'B'},	[1 3 5],	[0 0 0; 0 0 0]
	};
	tweakmodestrings = TWMprops(:,1);
	tweakmodedisplay = TWMprops(:,2);
	cvec = [1 1 1; 0 0 0];
	cvecinv = [0 0 0; 0 0 0]; % channel inversion (doesn't apply to offsets)
	isoffset = [0 0 0; 1 1 1];
	cmax = 2;
	cvecmax = [cmax*[1 1 1]; 1 1 1];
	selectedtweakmode = 2;
	legacytweak = 1;
	lasttweakmode = tweakmodestrings{selectedtweakmode};
	ishue = [];
	chanidx = [];
	
	fliphoriz = 1;
	flipvert = 0;
	
	iamsrgb = {'RGB','HS(L)','(L)CHab','Hue','Chroma'};
	iamsbw = {'I'};
	selectedimadjustmode = 1;
	lvvec = [0 1 0 1 1 1];
	gammamax = 2.5;
	contrastmax = 2.5;
	hc = [];
	
	blurmodestrings = {'gaussian','glow1','glow2','glowcross','glowstar','disk','ring','motion','rect','3dot','4dot','bars','cross'};
	thickblurmodes = {'ring','cross','3dot','4dot','bars'};
	selectedblurmode = 1;
	blursize = 20;
	blurangle = 0;
	blurthick = 0.2;
	blurinterpstrings = {'nearest','bilinear','bicubic'};
	selectedblurinterp = 2;
	
	tmblendmodestrings = {'overlay','contrast','softlighteb2','vividlight','glow','heat','helow','gleat'};
	tmblendmode = 1;
	tmblendamount = 2;
	tmblursize = 200;
	tmbluropacity = 0.75;
	tmblendopacity = 0.50;
	
	meanlinesmodestrings = {'mean','min','max','min y','max y'};
	meanlinesmodestringsbw = {'mean','min','max'};
	meanlinesmode = 1;
	mlorientation = 2;
	mlorientationstrings = {'vertical','horizontal'};
	blockifymodestrings = {'rgb','hsv','hsl','hsy'};
	blockifymode = 'rgb';
	blockifypixsize = [20 10];
	shuffletiles = [10 10];
	shufflergb = 1;
	glasstiling = [20 20];
	
	dithermodestrings = {'Zhou-Fang','Floyd-Steinberg','Bayer','Blue Noise','White Noise','Arbitrary Ordered','Line'};
	dithermode = 'Zhou-Fang';
	bayersize = 16;
	aodkfactor = 1;
	aodindexstrings = {'h','hi','hzz','hzzi','dzz','dzzi','cws'};	
	aodindex = 4;
	aodindtfstrings = {'none','flip vertical','flip horizontal','transpose'};
	aodindtf = 1;
	aodindinv = 0;
	ldlevels = 16;
	ldlength = 8;
	ldrampstrings = {'down','up','none'};
	ldramp = 1;
	ldaxisstrings = {'horizontal','vertical'};
	ldaxis = 1;
	ldpatternstrings = {'irregular','regular'};
	ldpattern = 1;
	ldradius = 10;
	ldnoise = 0;
	
	eoldirstrings = {'rows','columns'};
	eoldir = 1;
	eolratio = [3 10];
	eoloffset = 0;
	
	abcolor = 0;
	abwidth = 0.015;
	cbwidth = [NaN];
	cbautomodestrings = {'variance','deltavar','deltamean'};
	cbautomode = 1;
	cbthreshold = 0.01;
	cbchans = 1:(numimchans+hasalpha);
	
	c2acolor = [0 0 0];
	
	% adapt to image depth ######################################################
	if size(inpict,3) > 1
		methodstrings = msrgb;
		imadjustmodestrings = iamsrgb;
	else
		methodstrings = msbw;
		imadjustmodestrings = iamsbw;
		c2acolor = c2acolor(1);
	end
	
	if imcomposemode
		commitbuttonstr = 'Commit';
		commitbuttontts = '<html>Add this layer to the composition and recompose.<br/>Clicking again will update the same layer.<br/>Close window or click ''Modify Layer'' to start a different operation<br/></html>';
		methodstrings = methodstrings(~ismember(methodstrings,msnonimcompose));
	else
		commitbuttonstr = 'Apply';
		commitbuttontts = 'Apply these changes and exit';
	end
	
	% prepare the figure elements ######################################################
	handles = struct([]);
	figuresetup();
	panels = [handles.editorpanel1;
		handles.editorpanel2;
		handles.editorpanel3;
		handles.editorpanel4;
		handles.editorpanel5;
		handles.editorpanel6;
		handles.editorpanel7;
		handles.editorpanel8;
		handles.editorpanel9;
		handles.editorpanel10;
		handles.editorpanel11;
		handles.editorpanel12;
		handles.editorpanel13;
		handles.editorpanel14];
	
	if nonblockingmode
		set(handles.commitbutton,'visible','off')
		set(handles.exportbutton,'visible','on')
		set(handles.exportvarbox,'visible','on')
	else
		set(handles.commitbutton,'visible','on')
		set(handles.exportbutton,'visible','off')
		set(handles.exportvarbox,'visible','off')
	end	
	
	% bump cbf to make sure ui inits with relevant mode menu options
	modemenu_CBF(handles.modemenu,1);
	setparam(handles.dithermodemenu,0,'dithermode',0);
	
	if ~imcomposemode && ~nonblockingmode
		set(handles.IMMODIFY_GUI,'closerequestfcn',@commitbutton_CBF)
	end
		
	% certain things need disabled if in grayscale mode
	if numimchans == 1
		set(handles.meanlinesmodemenu,'string',meanlinesmodestringsbw)
		set(handles.shufflemodecheckbox,'enable','off')
		set(handles.blockifymodemenu,'enable','off')
	end
	setchannellabels();
	updatedisplay(inpict,'reset'); 
end


% FIGURE AND TAB PANES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function figuresetup()
	pw = 220;
	fhm = 0.015;
	
	h1 = figure(...
	'Units','normalized',...
	'MenuBar','none',...
	'Name','immodify_gui',...
	'NumberTitle','off',...
	'outerPosition',[0.125 0.125 0.75 0.75],...
	'HandleVisibility','callback',...
	'Tag','IMMODIFY_GUI');

	pph = getpixelposition(h1);
	pw = pw/pph(3);

	% AXES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	axes(...
	'Parent',h1,...
	'Position',[fhm 0.0299043062200957 1-2.5*fhm-pw 0.873205741626794],...
	'CameraPosition',[0.5 0.5 9.16025403784439],...
	'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
	'Color',get(0,'defaultaxesColor'),...
	'ColorOrder',get(0,'defaultaxesColorOrder'),...
	'LooseInset',[0.154399205561073 0.117262905162065 0.112830188679245 0.0799519807923169],...
	'XColor',get(0,'defaultaxesXColor'),...
	'XTick',0,...
	'XTickLabel',{  blanks(0) },...
	'XTickLabelMode','manual',...
	'XTickMode','manual',...
	'YColor',get(0,'defaultaxesYColor'),...
	'YTick',0,...
	'YTickLabel',{  blanks(0) },...
	'YTickLabelMode','manual',...
	'YTickMode','manual',...
	'ZColor',get(0,'defaultaxesZColor'),...
	'Tag','axes1',...
	'Visible','on');

	%% TOP PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	uicontrol(...
	'Parent',h1,...
	'Units','normalized',...
	'FontSize',10,...
	'Position',[0.514312096029548 0.929425837320574 0.111726685133887 0.0311004784688995],...
	'String','Preview Layer',...
	'TooltipString','Preview this layer before applying to composition',...
	'Tag','previewbutton',...
	'callback',@previewbutton_CBF);

	uicontrol(...
	'Parent',h1,...
	'Units','normalized',...
	'Position',[0.63 0.929425837320574 0.08 0.0311004784688995],...
	'String','Auto',...
	'value',autopreview,...
	'Style','checkbox',...
	'TooltipString','Automatically update layer preview',...
	'Tag','autopreviewcheckbox',...
	'callback',{@setparam,'autopreview'});

	uicontrol(...
	'Parent',h1,...
	'Units','normalized',...
	'FontSize',10,...
	'Position',[0.128347183748846 0.930622009569378 0.111726685133887 0.0287081339712919],...
	'String',commitbuttonstr,...
	'TooltipString',commitbuttontts,...
	'Tag','commitbutton',...
	'callback',@commitbutton_CBF);

	uicontrol(...
	'Parent',h1,...
	'Units','normalized',...
	'Position',[0.754385964912281 0.927033492822966 0.204062788550323 0.0358851674641148],...
	'String',methodstrings,...
	'Style','popupmenu',...
	'Value',1,...
	'Tag','modemenu',...
	'callback',@modemenu_CBF);

	% non-blocking mode export/commit box/button

	uicontrol(...
	'Parent',h1,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.03 0.930622009569378 0.15 0.0287081339712919],...
	'String','modifiedimage',...
	'Style','edit',...
	'TooltipString','name of exported image',...
	'Tag','exportvarbox',...
	'callback',@commitbutton_CBF);

	uicontrol(...
	'Parent',h1,...
	'Units','normalized',...
	'FontSize',8,...
	'Position',[0.18 0.930622009569378 0.05 0.0287081339712919],...
	'String','Export',...
	'TooltipString','export the current image',...
	'Tag','exportbutton',...
	'callback',@commitbutton_CBF);

	%% IMTWEAK PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep1 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel1',...
	'Clipping','on',...
	'visible','on',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	% tweakmode menu
	uicontrol(...
	'Parent',ep1,...
	'Units','normalized',...
	'Position',[0.10 0.939 0.8 0.0421940928270042],...
	'String',tweakmodedisplay,...
	'Style','popupmenu',...
	'Value',selectedtweakmode,...
	'Tag','tweakmodemenu',...
	'tooltipstring','<html>See documentation for more info.<br/>Refer to imtweak, rgb2hsy, rgb2husl, rgb2lch</html>',...
	'callback',{@setparam,'selectedtweakmode'});

	% legacy/full mode
	uicontrol(...
	'Parent',ep1,...
	'Units','normalized',...
	'Position',[0.55 0.939-0.04 0.4 0.04],...
	'String',{'Legacy','Full'},...
	'Style','popupmenu',...
	'Value',legacytweak,...
	'Tag','tweaklegacymenu',...
	'tooltipstring','See imtweak() documentation for details',...
	'callback',{@setparam,'tweaklegacy'});

	% reset channels
	uicontrol(...
	'Parent',ep1,...
	'Units','normalized',...
	'FontSize',10,...
	'Position',[0.05 0.941-0.04 0.35 0.035],...
	'String','Reset All',...
	'TooltipString','Reset all sliders',...
	'Tag','resetchansbutton',...
	'callback',{@setparam,'resetallchans'});

	channeltooltip = 'See imtweak() documentation for details';

	editboxparams = {'Parent',ep1,...
					'Units','normalized',...
					'BackgroundColor',[1 1 1],...
					'HorizontalAlignment','left',...
					'Style','edit',...
					'String','',...
					'TooltipString',channeltooltip,...
					'Tag','chbox'};
	textlabelparams = {'Parent',ep1,...
					'Units','normalized',...
					'FontSize',10,...
					'HorizontalAlignment','left',...
					'String','',...
					'Style','text',...
					'Tag','channellabel'};
	twsliderparams = {'Parent',ep1,...
					'Units','normalized',...
					'BackgroundColor',[0.9 0.9 0.9],...
					'Style','slider',...
					'Value',0,...
					'Tag','chslider'};
	minlabelparams = {'Parent',ep1,...
					'Units','normalized',...
					'FontSize',10,...
					'HorizontalAlignment','left',...
					'String','min',...
					'Style','text',...
					'Tag','chminlabel'};
	maxlabelparams = {'Parent',ep1,...
					'Units','normalized',...
					'FontSize',10,...
					'HorizontalAlignment','left',...
					'String','max',...
					'Style','text',...
					'Tag','chmaxlabel'};
	maxboxparams = {'Parent',ep1,...
					'Units','normalized',...
					'fontsize',8,...
					'BackgroundColor',[1 1 1],...
					'HorizontalAlignment','left',...
					'String',cmax,...
					'Style','edit',...
					'Tag','chmaxbox'};
	invchbxparams = {'Parent',ep1,...
					'Units','normalized',...
					'FontSize',9,...
					'String','Invert',...
					'Style','checkbox',...
					'value',0,...
					'Tag','chinvertcheckbox'};
				
	editbxgeo = [0.30 0.035];
	slidergeo = [0.909 0.035];
	blockspy = 0.15;
	blockor = 0.91;
	
	% channel 1
	uicontrol(editboxparams{:},...
	'Position',[0.65 blockor-0.065 editbxgeo],...
	'callback',{@setparam,'chval',1});
	uicontrol(textlabelparams{:},...
	'Position',[0.108949-0.05 blockor-0.065 0.3540 0.0295]);
	uicontrol(twsliderparams{:},...
	'Position',[0.04 blockor-0.065-slidergeo(2) slidergeo],...
	'callback',{@setparam,'chvalslider',1});
	uicontrol(minlabelparams{:},...
	'Position',[0.10 blockor-0.095-slidergeo(2) 0.2 0.0295]);
	uicontrol(maxlabelparams{:},...
	'Position',[0.78 blockor-0.095-slidergeo(2) 0.2 0.0295]);
	uicontrol(maxboxparams{:},...
	'Position',[0.78 blockor-0.1-slidergeo(2) 0.15 0.035],...
	'callback',{@setparam,'channelmax',1});
	uicontrol(invchbxparams{:},...
	'Position',[0.3 blockor-0.1-slidergeo(2) 0.3 0.0295],...
	'callback',{@setparam,'invertchannel',1});

	% channel 2
	uicontrol(editboxparams{:},...
	'Position',[0.65 blockor-0.065-blockspy editbxgeo],...
	'callback',{@setparam,'chval',2});
	uicontrol(textlabelparams{:},...
	'Position',[0.108949-0.05 blockor-0.065-blockspy 0.3540 0.0295]);
	uicontrol(twsliderparams{:},...
	'Position',[0.04 blockor-0.065-slidergeo(2)-blockspy slidergeo],...
	'callback',{@setparam,'chvalslider',2});
	uicontrol(minlabelparams{:},...
	'Position',[0.10 blockor-0.095-slidergeo(2)-blockspy 0.2 0.0295]);
	uicontrol(maxlabelparams{:},...
	'Position',[0.78 blockor-0.095-slidergeo(2)-blockspy 0.2 0.0295]);
	uicontrol(maxboxparams{:},...
	'Position',[0.78 blockor-0.1-slidergeo(2)-blockspy 0.15 0.035],...
	'callback',{@setparam,'channelmax',2});
	uicontrol(invchbxparams{:},...
	'Position',[0.3 blockor-0.1-slidergeo(2)-blockspy 0.3 0.0295],...
	'callback',{@setparam,'invertchannel',2});

	% channel 3
	uicontrol(editboxparams{:},...
	'Position',[0.65 blockor-0.065-2*blockspy editbxgeo],...
	'callback',{@setparam,'chval',3});
	uicontrol(textlabelparams{:},...
	'Position',[0.108949-0.05 blockor-0.065-2*blockspy 0.3540 0.0295]);
	uicontrol(twsliderparams{:},...
	'Position',[0.04 blockor-0.065-slidergeo(2)-2*blockspy slidergeo],...
	'callback',{@setparam,'chvalslider',3});
	uicontrol(minlabelparams{:},...
	'Position',[0.10 blockor-0.095-slidergeo(2)-2*blockspy 0.2 0.0295]);
	uicontrol(maxlabelparams{:},...
	'Position',[0.78 blockor-0.095-slidergeo(2)-2*blockspy 0.2 0.0295]);
	uicontrol(maxboxparams{:},...
	'Position',[0.78 blockor-0.1-slidergeo(2)-2*blockspy 0.15 0.035],...
	'callback',{@setparam,'channelmax',3});
	uicontrol(invchbxparams{:},...
	'Position',[0.3 blockor-0.1-slidergeo(2)-2*blockspy 0.3 0.0295],...
	'callback',{@setparam,'invertchannel',3});

	% channel 4
	uicontrol(editboxparams{:},...
	'Position',[0.65 blockor-0.065-3*blockspy editbxgeo],...
	'callback',{@setparam,'chval',4});
	uicontrol(textlabelparams{:},...
	'Position',[0.108949-0.05 blockor-0.065-3*blockspy 0.3540 0.0295]);
	uicontrol(twsliderparams{:},...
	'Position',[0.04 blockor-0.065-slidergeo(2)-3*blockspy slidergeo],...
	'callback',{@setparam,'chvalslider',4});
	uicontrol(minlabelparams{:},...
	'Position',[0.10 blockor-0.095-slidergeo(2)-3*blockspy 0.2 0.0295]);
	uicontrol(maxlabelparams{:},...
	'Position',[0.78 blockor-0.095-slidergeo(2)-3*blockspy 0.2 0.0295]);
	uicontrol(maxboxparams{:},...
	'Position',[0.78 blockor-0.1-slidergeo(2)-3*blockspy 0.15 0.035],...
	'callback',{@setparam,'channelmax',4});
	uicontrol(invchbxparams{:},...
	'Position',[0.3 blockor-0.1-slidergeo(2)-3*blockspy 0.3 0.0295],...
	'callback',{@setparam,'invertchannel',4});

	% channel 5
	uicontrol(editboxparams{:},...
	'Position',[0.65 blockor-0.065-4*blockspy editbxgeo],...
	'callback',{@setparam,'chval',5});
	uicontrol(textlabelparams{:},...
	'Position',[0.108949-0.05 blockor-0.065-4*blockspy 0.3540 0.0295]);
	uicontrol(twsliderparams{:},...
	'Position',[0.04 blockor-0.065-slidergeo(2)-4*blockspy slidergeo],...
	'callback',{@setparam,'chvalslider',5});
	uicontrol(minlabelparams{:},...
	'Position',[0.10 blockor-0.095-slidergeo(2)-4*blockspy 0.2 0.0295]);
	uicontrol(maxlabelparams{:},...
	'Position',[0.78 blockor-0.095-slidergeo(2)-4*blockspy 0.2 0.0295]);
	uicontrol(maxboxparams{:},...
	'Position',[0.78 blockor-0.1-slidergeo(2)-4*blockspy 0.15 0.035],...
	'callback',{@setparam,'channelmax',5});
	uicontrol(invchbxparams{:},...
	'Position',[0.3 blockor-0.1-slidergeo(2)-4*blockspy 0.3 0.0295],...
	'callback',{@setparam,'invertchannel',5});

	% channel 6
	uicontrol(editboxparams{:},...
	'Position',[0.65 blockor-0.065-5*blockspy editbxgeo],...
	'callback',{@setparam,'chval',6});
	uicontrol(textlabelparams{:},...
	'Position',[0.108949-0.05 blockor-0.065-5*blockspy 0.3540 0.0295]);
	uicontrol(twsliderparams{:},...
	'Position',[0.04 blockor-0.065-slidergeo(2)-5*blockspy slidergeo],...
	'callback',{@setparam,'chvalslider',6});
	uicontrol(minlabelparams{:},...
	'Position',[0.10 blockor-0.095-slidergeo(2)-5*blockspy 0.2 0.0295]);
	uicontrol(maxlabelparams{:},...
	'Position',[0.78 blockor-0.095-slidergeo(2)-5*blockspy 0.2 0.0295]);
	uicontrol(maxboxparams{:},...
	'Position',[0.78 blockor-0.1-slidergeo(2)-5*blockspy 0.15 0.035],...
	'callback',{@setparam,'channelmax',6});
	uicontrol(invchbxparams{:},...
	'Position',[0.3 blockor-0.1-slidergeo(2)-5*blockspy 0.3 0.0295],...
	'callback',{@setparam,'invertchannel',6});


	%% IMADJUST PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep2 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel2',...
	'Clipping','on',...
	'visible','off',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	vertscale = 1;
	bh = 0.035*vertscale;
	lh = 0.025*vertscale;
	vp = 0.01*vertscale;
	hm = 0.05;
	vm = 0.29*vertscale;

	% set automatic
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',10,...
	'Position',[hm vm+8*vp+6*lh+12*bh 0.20 bh],...
	'String','Auto',...
	'TooltipString','Automatically select parameters using STRETCHLIM(I,0.001)',...
	'Tag','autolevelbutton',...
	'callback',{@setparam,'autolevel'});

	% reset all
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',10,...
	'Position',[hm+0.2 vm+8*vp+6*lh+12*bh 0.20 bh],...
	'String','Reset',...
	'TooltipString','Reset Sliders',...
	'Tag','resetlevelbutton',...
	'callback',{@setparam,'resetlevel'});

	% set colormode
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'Position',[0.50 vm+8*vp+6*lh+12*bh 0.45 bh],...
	'String',imadjustmodestrings,...
	'Style','popupmenu',...
	'Value',selectedimadjustmode,...
	'Tag','imadjustmodemenu',...
	'tooltipstring','<html>RGB performs equal scaling of all RGB channels<br/>Other modes operate on the specified channel</html>',...
	'callback',{@setparam,'selectedimadjustmode'});

	% slider 1
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.65 vm+7*vp+6*lh+11*bh 0.30 bh],...
	'String',lvvec(1),...
	'Style','edit',...
	'TooltipString','manually set value',...
	'Tag','lvbox',...
	'callback',{@setparam,'levelval',1});
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.108949-0.05 vm+7*vp+6*lh+11*bh 0.35408560311284 lh],...
	'String','Input Min',...
	'Style','text',...
	'Tag','levellabel');
	uicontrol(...   
	'Parent',ep2,...
	'Units','normalized',...
	'BackgroundColor',[0.9 0.9 0.9],...
	'Position',[hm vm+7*vp+6*lh+10*bh 1-2*hm bh],...
	'Style','slider',...
	'Value',lvvec(1),...
	'Tag','lvslider',...
	'callback',{@setparam,'levelslider',1});
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.10 vm+7*vp+5*lh+10*bh 0.2 lh],...
	'String','0',...
	'Style','text',...
	'Tag','lvminlabel');
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.78 vm+7*vp+5*lh+10*bh 0.2 lh],...
	'String','1',...
	'Style','text',...
	'Tag','lvmaxlabel');

	% slider 2
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.65 vm+6*vp+5*lh+9*bh 0.30 bh],...
	'String',lvvec(2),...
	'Style','edit',...
	'TooltipString','manually set value',...
	'Tag','lvbox',...
	'callback',{@setparam,'levelval',2});
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.108949-0.05 vm+6*vp+5*lh+9*bh 0.35408560311284 lh],...
	'String','Input Max',...
	'Style','text',...
	'Tag','levellabel');
	uicontrol(...   
	'Parent',ep2,...
	'Units','normalized',...
	'BackgroundColor',[0.9 0.9 0.9],...
	'Position',[hm vm+6*vp+5*lh+8*bh 1-2*hm bh],...
	'Style','slider',...
	'Value',lvvec(2),...
	'Tag','lvslider',...
	'callback',{@setparam,'levelslider',2});
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.10 vm+6*vp+4*lh+8*bh 0.2 lh],...
	'String','0',...
	'Style','text',...
	'Tag','lvminlabel');
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.78 vm+6*vp+4*lh+8*bh 0.2 lh],...
	'String','1',...
	'Style','text',...
	'Tag','lvmaxlabel');

	% slider 3
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.65 vm+5*vp+4*lh+7*bh 0.30 bh],...
	'String',lvvec(3),...
	'Style','edit',...
	'TooltipString','manually set value',...
	'Tag','lvbox',...
	'callback',{@setparam,'levelval',3});
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.108949-0.05 vm+5*vp+4*lh+7*bh 0.35408560311284 lh],...
	'String','Output Min',...
	'Style','text',...
	'Tag','levellabel');
	uicontrol(...   
	'Parent',ep2,...
	'Units','normalized',...
	'BackgroundColor',[0.9 0.9 0.9],...
	'Position',[hm vm+5*vp+4*lh+6*bh 1-2*hm bh],...
	'Style','slider',...
	'Value',lvvec(3),...
	'Tag','lvslider',...
	'callback',{@setparam,'levelslider',3});
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.10 vm+5*vp+3*lh+6*bh 0.2 lh],...
	'String','0',...
	'Style','text',...
	'Tag','lvminlabel');
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.78 vm+5*vp+3*lh+6*bh 0.2 lh],...
	'String','1',...
	'Style','text',...
	'Tag','lvmaxlabel');

	% slider 4
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.65 vm+4*vp+3*lh+5*bh 0.30 bh],...
	'String',lvvec(4),...
	'Style','edit',...
	'TooltipString','manually set value',...
	'Tag','lvbox',...
	'callback',{@setparam,'levelval',4});
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.108949-0.05 vm+4*vp+3*lh+5*bh 0.35408560311284 lh],...
	'String','Output Max',...
	'Style','text',...
	'Tag','levellabel');
	uicontrol(...   
	'Parent',ep2,...
	'Units','normalized',...
	'BackgroundColor',[0.9 0.9 0.9],...
	'Position',[hm vm+4*vp+3*lh+4*bh 1-2*hm bh],...
	'Style','slider',...
	'Value',lvvec(4),...
	'Tag','lvslider',...
	'callback',{@setparam,'levelslider',4});
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.10 vm+4*vp+2*lh+4*bh 0.2 lh],...
	'String','0',...
	'Style','text',...
	'Tag','lvminlabel');
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.78 vm+4*vp+2*lh+4*bh 0.2 lh],...
	'String','1',...
	'Style','text',...
	'Tag','lvmaxlabel');

	% slider 5
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.65 vm+3*vp+2*lh+3*bh 0.30 bh],...
	'String',lvvec(5),...
	'Style','edit',...
	'TooltipString','manually set value',...
	'Tag','lvbox',...
	'callback',{@setparam,'levelval',5});
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.108949-0.05 vm+3*vp+2*lh+3*bh 0.35408560311284 lh],...
	'String','Gamma',...
	'Style','text',...
	'Tag','levellabel');
	uicontrol(...   
	'Parent',ep2,...
	'Units','normalized',...
	'BackgroundColor',[0.9 0.9 0.9],...
	'Position',[hm vm+3*vp+2*lh+2*bh 1-2*hm bh],...
	'Style','slider',...
	'Value',lvvec(5),...
	'max',gammamax,...
	'Tag','lvslider',...
	'callback',{@setparam,'levelslider',5});
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.10 vm+3*vp+lh+2*bh 0.2 lh],...
	'String','0',...
	'Style','text',...
	'Tag','lvminlabel');
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'fontsize',8,...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.78 vm+3*vp+lh+2*bh 0.15 lh],...
	'String',gammamax,...
	'Style','edit',...
	'Tag','gammamaxbox',...
	'callback',{@setparam,'gammamax'});

	% slider 6
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.65 vm+2*vp+lh+bh 0.30 bh],...
	'String',lvvec(6),...
	'Style','edit',...
	'TooltipString','manually set value',...
	'Tag','lvbox',...
	'callback',{@setparam,'levelval',6});
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.108949-0.05 vm+2*vp+lh+bh 0.35408560311284 lh],...
	'String','Contrast',...
	'Style','text',...
	'Tag','levellabel');
	uicontrol(...   
	'Parent',ep2,...
	'Units','normalized',...
	'BackgroundColor',[0.9 0.9 0.9],...
	'Position',[hm vm+2*vp+lh 1-2*hm bh],...
	'Style','slider',...
	'Value',lvvec(6),...
	'max',contrastmax,...
	'Tag','lvslider',...
	'callback',{@setparam,'levelslider',6});
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'FontSize',8,...
	'HorizontalAlignment','left',...
	'Position',[0.10 vm+2*vp 0.2 lh],...
	'String','0',...
	'Style','text',...
	'Tag','lvminlabel');
	uicontrol(...
	'Parent',ep2,...
	'Units','normalized',...
	'fontsize',8,...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.78 vm+2*vp 0.15 lh],...
	'String',contrastmax,...
	'Style','edit',...
	'Tag','contrastmaxbox',...
	'callback',{@setparam,'contrastmax'});

	axes(...
	'Parent',ep2,...
	'Position',[0.15 0.04 0.7 0.25],...
	'CameraPosition',[0.5 0.5 9.16025403784439],...
	'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
	'Color',get(0,'defaultaxesColor'),...
	'ColorOrder',get(0,'defaultaxesColorOrder'),...
	'LooseInset',[0.154399205561073 0.117262905162065 0.112830188679245 0.0799519807923169],...
	'XColor',get(0,'defaultaxesXColor'),...
	'XTick',0,...
	'XTickLabel',{  blanks(0) },...
	'XTickLabelMode','manual',...
	'XTickMode','manual',...
	'YColor',get(0,'defaultaxesYColor'),...
	'YTick',0,...
	'YTickLabel',{  blanks(0) },...
	'YTickLabelMode','manual',...
	'YTickMode','manual',...
	'xgrid','on',...
	'ygrid','on',...
	'xlim',[0 1],...
	'ylim',[0 1],...
	'ZColor',get(0,'defaultaxesZColor'),...
	'Tag','imadjustaxes',...
	'Visible','on');

	%% FLIP PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep3 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel3',...
	'Clipping','on',...
	'visible','off',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	uicontrol(...
	'Parent',ep3,...
	'Units','normalized',...
	'FontSize',10,...
	'Position',[0.11284046692607 0.939-0 0.88 0.029535864978903],...
	'String','Horizontal',...
	'Style','checkbox',...
	'value',fliphoriz,...
	'TooltipString','Flip Horizontal',...
	'Tag','fliphorizcheckbox',...
	'callback',{@setparam,'fliphoriz'});

	uicontrol(...
	'Parent',ep3,...
	'Units','normalized',...
	'FontSize',10,...
	'Position',[0.11284046692607 0.939-0.06 0.88 0.029535864978903],...
	'String','Vertical',...
	'Style','checkbox',...
	'value',flipvert,...
	'TooltipString','Flip Vertical',...
	'Tag','flipvertcheckbox',...
	'callback',{@setparam,'flipvert'});

	%% BLUR PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep4 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel4',...
	'Clipping','on',...
	'visible','off',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	uicontrol(...
	'Parent',ep4,...
	'Units','normalized',...
	'Position',[0.10 0.939 0.8 0.0421940928270042],...
	'String',blurmodestrings,...
	'Style','popupmenu',...
	'Value',selectedblurmode,...
	'Tag','blurmodemenu',...
	'tooltipstring','Select blur kernel type',...
	'callback',{@setparam,'selectedblurmode'});

	% size
	uicontrol(...
	'Parent',ep4,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.06 0.350194552529183 0.0421940928270042],...
	'String',blursize,...
	'Style','edit',...
	'TooltipString','blur size',...
	'Tag','blursizebox',...
	'callback',{@setparam,'blursize'});

	uicontrol(...
	'Parent',ep4,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.06 0.35408560311284 0.029535864978903],...
	'String','Kernel Size',...
	'Style','text',...
	'Tag','blursizelabel');

	% angle
	uicontrol(...
	'Parent',ep4,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.12 0.350194552529183 0.0421940928270042],...
	'String',blurangle,...
	'Style','edit',...
	'TooltipString','blur angle (degrees)',...
	'Tag','bluranglebox',...
	'callback',{@setparam,'blurangle'});

	uicontrol(...
	'Parent',ep4,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.12 0.35408560311284 0.029535864978903],...
	'String','Blur Angle',...
	'Style','text',...
	'Tag','bluranglelabel');

	% thickness
	uicontrol(...
	'Parent',ep4,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.18 0.350194552529183 0.0421940928270042],...
	'String',blurthick,...
	'Style','edit',...
	'TooltipString','line/dot thickness',...
	'Tag','blurthickbox',...
	'callback',{@setparam,'blurthick'});

	uicontrol(...
	'Parent',ep4,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.18 0.35408560311284 0.029535864978903],...
	'String','Thickness',...
	'Style','text',...
	'Tag','blurthicklabel');

	uicontrol(...
	'Parent',ep4,...
	'Units','normalized',...
	'Position',[0.10 0.939-0.24 0.8 0.0421940928270042],...
	'String',blurinterpstrings,...
	'Style','popupmenu',...
	'Value',selectedblurinterp,...
	'Tag','blurinterpmenu',...
	'tooltipstring','Select interpolation type used for rotations',...
	'callback',{@setparam,'selectedblurinterp'});

	%% TONEMAP PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep5 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel5',...
	'Clipping','on',...
	'visible','off',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	% blur size
	uicontrol(...
	'Parent',ep5,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.57 0.939 0.3 0.0421940928270042],...
	'String',tmblursize,...
	'Style','edit',...
	'TooltipString','blur kernel size',...
	'Tag','tmblursizebox',...
	'callback',{@setparam,'tmblursize'});

	uicontrol(...
	'Parent',ep5,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939 0.4 0.029535864978903],...
	'String','Blur Size',...
	'Style','text',...
	'Tag','tmblursizelabel');

	% blur opacity
	uicontrol(...
	'Parent',ep5,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.57 0.939-0.06 0.3 0.0421940928270042],...
	'String',tmbluropacity,...
	'Style','edit',...
	'TooltipString','blur opacity',...
	'Tag','tmbluropacitybox',...
	'callback',{@setparam,'tmbluropacity'});

	uicontrol(...
	'Parent',ep5,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.06 0.4 0.029535864978903],...
	'String','Blur Opacity',...
	'Style','text',...
	'Tag','tmbluropacitylabel');

	% blend opacity
	uicontrol(...
	'Parent',ep5,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.57 0.939-0.18 0.3 0.0421940928270042],...
	'String',tmblendopacity,...
	'Style','edit',...
	'TooltipString','opacity used in final mixdown',...
	'Tag','tmblendopacitybox',...
	'callback',{@setparam,'tmblendopacity'});

	uicontrol(...
	'Parent',ep5,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.18 0.4 0.029535864978903],...
	'String','Blend Opacity',...
	'Style','text',...
	'Tag','tmblendopacitylabel');

	% blend mode
	uicontrol(...
	'Parent',ep5,...
	'Units','normalized',...
	'Position',[0.10 0.939-0.12 0.8 0.0421940928270042],...
	'String',tmblendmodestrings,...
	'Style','popupmenu',...
	'Value',tmblendmode,...
	'Tag','tmblendmodemenu',...
	'tooltipstring','Select blend mode used for final mixdown',...
	'callback',{@setparam,'tmblendmode'});

	% blend amount
	uicontrol(...
	'Parent',ep5,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.57 0.939-0.24 0.3 0.0421940928270042],...
	'String',tmblendamount,...
	'Style','edit',...
	'TooltipString','amount parameter for blend mode',...
	'Tag','tmblendamountbox',...
	'callback',{@setparam,'tmblendamount'});

	uicontrol(...
	'Parent',ep5,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.24 0.45 0.029535864978903],...
	'String','Blend Amount',...
	'Style','text',...
	'Tag','tmblendamountlabel');
	
	%% MEANLINES PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep6 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel6',...
	'Clipping','on',...
	'visible','off',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	uicontrol(...
	'Parent',ep6,...
	'Units','normalized',...
	'Position',[0.10 0.939-0.00 0.8 0.0421940928270042],...
	'String',meanlinesmodestrings,...
	'Style','popupmenu',...
	'Value',meanlinesmode,...
	'Tag','meanlinesmodemenu',...
	'tooltipstring','sampling mode',...
	'callback',{@setparam,'meanlinesmode'});

	uicontrol(...
	'Parent',ep6,...
	'Units','normalized',...
	'Position',[0.10 0.939-0.06 0.8 0.0421940928270042],...
	'String',mlorientationstrings,...
	'Style','popupmenu',...
	'Value',mlorientation,...
	'Tag','mlorientationmenu',...
	'tooltipstring','sample orientation',...
	'callback',{@setparam,'mlorientation'});


	%% BLOCKIFY PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep7 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel7',...
	'Clipping','on',...
	'visible','off',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	uicontrol(...
	'Parent',ep7,...
	'Units','normalized',...
	'Position',[0.10 0.939 0.8 0.0421940928270042],...
	'String',blockifymodestrings,...
	'Style','popupmenu',...
	'Value',1,...
	'Tag','blockifymodemenu',...
	'tooltipstring','Select color model',...
	'callback',{@setparam,'blockifymode'});

	% size
	uicontrol(...
	'Parent',ep7,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521-0.15 0.939-0.06 0.55 0.0421940928270042],...
	'String',mat2str(blockifypixsize),...
	'Style','edit',...
	'TooltipString','scalar, 1x2, 1x3, or 3x2',...
	'Tag','blockifysizebox',...
	'callback',{@setparam,'blockifypixsize'});

	uicontrol(...
	'Parent',ep7,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.06-0.02 0.25 0.029535864978903*2],...
	'String','Pixel Size',...
	'Style','text',...
	'Tag','blockifysizelabel');

	%% SHUFFLE PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep8 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel8',...
	'Clipping','on',...
	'visible','off',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	% size
	uicontrol(...
	'Parent',ep8,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.06 0.350194552529183 0.0421940928270042],...
	'String',mat2str(shuffletiles),...
	'Style','edit',...
	'TooltipString','[tilesdown tilesacross]',...
	'Tag','shuffletilesbox',...
	'callback',{@setparam,'shuffletiles'});

	uicontrol(...
	'Parent',ep8,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.06 0.35408560311284 0.029535864978903],...
	'String','Tiling',...
	'Style','text',...
	'Tag','shuffletileslabel');

	uicontrol(...
	'Parent',ep8,...
	'Units','normalized',...
	'FontSize',10,...
	'Position',[0.11284046692607 0.939-0 0.88 0.029535864978903],...
	'String','RGB lock',...
	'Style','checkbox',...
	'value',shufflergb,...
	'TooltipString','when off, channels are shuffled independently',...
	'Tag','shufflemodecheckbox',...
	'callback',{@setparam,'shufflergb'});

	%% GLASSTILES PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep9 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel9',...
	'Clipping','on',...
	'visible','off',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	% size
	uicontrol(...
	'Parent',ep9,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939 0.350194552529183 0.0421940928270042],...
	'String',mat2str(glasstiling),...
	'Style','edit',...
	'TooltipString','[tilesdown tilesacross]',...
	'Tag','gttilingbox',...
	'callback',{@setparam,'glasstiling'});

	uicontrol(...
	'Parent',ep9,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939 0.354 0.029535864978903],...
	'String','Tiling',...
	'Style','text',...
	'Tag','gttilinglabel');

	%% DITHER PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep10 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel10',...
	'Clipping','on',...
	'visible','off',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'Position',[0.10 0.939 0.8 0.0421940928270042],...
	'String',dithermodestrings,...
	'Style','popupmenu',...
	'Value',1,...
	'Tag','dithermodemenu',...
	'tooltipstring',sprintf('Select dither type: \nZhou-Fang: variable-coefficient error-diffusion dither\nFloyd-Steinberg: error-diffusion dither\nBayer: standard ordered dither\nBlue Noise: freq-weighted noise thresholding\nWhite Noise: simple noise thresholding\nArbitrary Ordered: allows arbitrary index arrays\nLine: variable-density & length line segments'),...
	'callback',{@setparam,'dithermode'});

	% bayer matrix size
	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521-0.15 0.939-0.06 0.55 0.0421940928270042],...
	'String',bayersize,...
	'Style','edit',...
	'TooltipString',sprintf('size of Bayer coefficient matrix\nnumber of reproducible gray levels is INDSIZE^2'),...
	'Tag','bayersizebox',...
	'callback',{@setparam,'bayersize'});

	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.06-0.02 0.25 0.029535864978903*2],...
	'String','Index Size',...
	'Style','text',...
	'Tag','bayersizelabel');

	% aod scaling factor
	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.06 0.350194552529183 0.0421940928270042],...
	'String',aodkfactor,...
	'Style','edit',...
	'TooltipString',sprintf('Index scaling factor\nnumber of reproducible gray levels is INDSIZE^SCALEFACTOR'),...
	'Tag','aodkbox',...
	'callback',{@setparam,'aodkfactor'});

	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.06 0.35408560311284 0.029535864978903],...
	'String','Scaling Factor',...
	'Style','text',...
	'Tag','aodklabel');

	% aod index menu
	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'Position',[0.10 0.939-0.12 0.8 0.0421940928270042],...
	'String',aodindexstrings,...
	'Style','popupmenu',...
	'Value',aodindex,...
	'Tag','aodindexmenu',...
	'tooltipstring','index array preset (see HELP ARBORDDITHER)',...
	'callback',{@setparam,'aodindex'});
	
	% aod index transformation menu
	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'Position',[0.10 0.939-0.18 0.8 0.0421940928270042],...
	'String',aodindtfstrings,...
	'Style','popupmenu',...
	'Value',aodindtf,...
	'Tag','aodindtfmenu',...
	'tooltipstring','index array transformation (see HELP ARBORDDITHER)',...
	'callback',{@setparam,'aodindtf'});

	% aod index invert checkbox
	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'FontSize',10,...
	'Position',[0.11284046692607 0.939-0.24 0.88 0.029535864978903],...
	'String','Invert',...
	'Style','checkbox',...
	'value',aodindinv,...
	'TooltipString','invert index array',...
	'Tag','aodindinvcheckbox',...
	'callback',{@setparam,'aodindinv'});

	% ld levels
	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.06 0.350194552529183 0.0421940928270042],...
	'String',ldlevels,...
	'Style','edit',...
	'TooltipString','number of gray levels',...
	'Tag','ldlevelsbox',...
	'callback',{@setparam,'ldlevels'});

	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.06 0.35408560311284 0.029535864978903],...
	'String','Gray Levels',...
	'Style','text',...
	'Tag','ldlevelslabel');

	% ld length
	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.12 0.350194552529183 0.0421940928270042],...
	'String',ldlength,...
	'Style','edit',...
	'TooltipString','maximum line length (0 for unlimited length)',...
	'Tag','ldlengthbox',...
	'callback',{@setparam,'ldlength'});

	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.12 0.35408560311284 0.029535864978903],...
	'String','Max Length',...
	'Style','text',...
	'Tag','ldlengthlabel');

	% ld ramp menu
	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'Position',[0.10 0.939-0.18 0.8 0.0421940928270042],...
	'String',ldrampstrings,...
	'Style','popupmenu',...
	'Value',ldramp,...
	'Tag','ldrampmenu',...
	'tooltipstring','line length scaling behavior',...
	'callback',{@setparam,'ldramp'});

	% ld axis menu
	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'Position',[0.10 0.939-0.24 0.8 0.0421940928270042],...
	'String',ldaxisstrings,...
	'Style','popupmenu',...
	'Value',ldaxis,...
	'Tag','ldaxismenu',...
	'tooltipstring','line direction',...
	'callback',{@setparam,'ldaxis'});

	% ld pattern menu
	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'Position',[0.10 0.939-0.30 0.8 0.0421940928270042],...
	'String',ldpatternstrings,...
	'Style','popupmenu',...
	'Value',ldpattern,...
	'Tag','ldpatternmenu',...
	'tooltipstring','line patterning',...
	'callback',{@setparam,'ldpattern'});

	% ld radius
	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.36 0.350194552529183 0.0421940928270042],...
	'String',ldradius,...
	'Style','edit',...
	'TooltipString','smoothing filter radius',...
	'Tag','ldradiusbox',...
	'callback',{@setparam,'ldradius'});

	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.36 0.35408560311284 0.029535864978903],...
	'String','Radius',...
	'Style','text',...
	'Tag','ldradiuslabel');

	% ld noise
	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.42 0.350194552529183 0.0421940928270042],...
	'String',ldnoise,...
	'Style','edit',...
	'TooltipString','injected noise amount',...
	'Tag','ldnoisebox',...
	'callback',{@setparam,'ldnoise'});

	uicontrol(...
	'Parent',ep10,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.42 0.35408560311284 0.029535864978903],...
	'String','Noise',...
	'Style','text',...
	'Tag','ldnoiselabel');

	%% EOL PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep11 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel11',...
	'Clipping','on',...
	'visible','off',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	% eol dir menu
	uicontrol(...
	'Parent',ep11,...
	'Units','normalized',...
	'Position',[0.10 0.939-0.06 0.8 0.0421940928270042],...
	'String',eoldirstrings,...
	'Style','popupmenu',...
	'Value',eoldir,...
	'Tag','eoldirmenu',...
	'tooltipstring','output orientation',...
	'callback',{@setparam,'eoldir'});

	% eol ratio
	uicontrol(...
	'Parent',ep11,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.12 0.350194552529183 0.0421940928270042],...
	'String',mat2str(eolratio),...
	'Style','edit',...
	'TooltipString','e.g. for [3 4], three of every four lines are extracted',...
	'Tag','eolratiobox',...
	'callback',{@setparam,'eolratio'});

	uicontrol(...
	'Parent',ep11,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.12 0.35408560311284 0.029535864978903],...
	'String','Ratio',...
	'Style','text',...
	'Tag','eolratiolabel');

	% eol offset
	uicontrol(...
	'Parent',ep11,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.18 0.350194552529183 0.0421940928270042],...
	'String',eoloffset,...
	'Style','edit',...
	'TooltipString','offset pattern (pixels)',...
	'Tag','eoloffsetbox',...
	'callback',{@setparam,'eoloffset'});

	uicontrol(...
	'Parent',ep11,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.18 0.35408560311284 0.029535864978903],...
	'String','Offset',...
	'Style','text',...
	'Tag','eoloffsetlabel');

	%% ADDBORDER PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep12 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel12',...
	'Clipping','on',...
	'visible','off',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	% color
	uicontrol(...
	'Parent',ep12,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939 0.350194552529183 0.0421940928270042],...
	'String',mat2str(abcolor),...
	'Style','edit',...
	'TooltipString','<html>Border color (normalized)<br>May be scalar or vector of length matching dim3</html>',...
	'Tag','abcolorbox',...
	'callback',{@setparam,'abcolor'});

	uicontrol(...
	'Parent',ep12,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939 0.35408560311284 0.029535864978903],...
	'String','Color',...
	'Style','text',...
	'Tag','abcolorboxlabel');

	% width
	uicontrol(...
	'Parent',ep12,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.06 0.350194552529183 0.0421940928270042],...
	'String',mat2str(abwidth),...
	'Style','edit',...
	'TooltipString','<html>Border width<br>May 1, 2, or 4 elements ([TBLR], [TB LR], [T B L R])<br>Values &gt=1 are in pixels<br>Values &lt 1 are a fraction of the image diagonal</html>',...
	'Tag','abwidthbox',...
	'callback',{@setparam,'abwidth'});

	uicontrol(...
	'Parent',ep12,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.06 0.35408560311284 0.029535864978903],...
	'String','Width',...
	'Style','text',...
	'Tag','abwidthboxlabel');

	%% CROPBORDER PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep13 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel13',...
	'Clipping','on',...
	'visible','off',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	% width
	uicontrol(...
	'Parent',ep13,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939 0.350194552529183 0.0421940928270042],...
	'String',mat2str(cbwidth),...
	'Style','edit',...
	'TooltipString','<html>Border width<br>May 1, 2, or 4 elements ([TBLR], [TB LR], [T B L R])<br>Elements specified with NaN are calculated automatically</html>',...
	'Tag','cbwidthbox',...
	'callback',{@setparam,'cbwidth'});

	uicontrol(...
	'Parent',ep13,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939 0.35408560311284 0.029535864978903],...
	'String','Width',...
	'Style','text',...
	'Tag','cbwidthboxlabel');

	uicontrol(...
	'Parent',ep13,...
	'Units','normalized',...
	'Position',[0.10 0.939-0.06 0.8 0.0421940928270042],...
	'String',cbautomodestrings,...
	'Style','popupmenu',...
	'Value',cbautomode,...
	'Tag','cbautomodemenu',...
	'tooltipstring','method used for automatically resolving widths specified as NaN',...
	'callback',{@setparam,'cbautomode'});

	% threshold
	uicontrol(...
	'Parent',ep13,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.12 0.350194552529183 0.0421940928270042],...
	'String',cbthreshold,...
	'Style','edit',...
	'TooltipString','threshold used for automated calculations',...
	'Tag','cbthresholdbox',...
	'callback',{@setparam,'cbthreshold'});

	uicontrol(...
	'Parent',ep13,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.12 0.35408560311284 0.029535864978903],...
	'String','Threshold',...
	'Style','text',...
	'Tag','cbthresholdboxlabel');

	% chans
	uicontrol(...
	'Parent',ep13,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939-0.18 0.350194552529183 0.0421940928270042],...
	'String',mat2str(cbchans),...
	'Style','edit',...
	'TooltipString','which channels to process for automated calculation',...
	'Tag','cbchansbox',...
	'callback',{@setparam,'cbchans'});

	uicontrol(...
	'Parent',ep13,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939-0.18 0.35408560311284 0.029535864978903],...
	'String','Channels',...
	'Style','text',...
	'Tag','cbchansboxlabel');

	%% COLOR2ALPHA PANEL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	ep14 = uipanel(...
	'Parent',h1,...
	'Title','Edit Parameters',...
	'Tag','editorpanel14',...
	'Clipping','on',...
	'visible','off',...
	'Position',[1-fhm-pw 0.0311004784688995 pw 0.87200956937799]);

	% color
	uicontrol(...
	'Parent',ep14,...
	'Units','normalized',...
	'BackgroundColor',[1 1 1],...
	'HorizontalAlignment','left',...
	'Position',[0.521400778210117 0.939 0.350194552529183 0.0421940928270042],...
	'String',mat2str(c2acolor),...
	'Style','edit',...
	'TooltipString','<html>Color to be replaced by transparency (normalized)<br>An empty vector [] selects the image mode (most frequent color).</html>',...
	'Tag','c2acolorbox',...
	'callback',{@setparam,'c2acolor'});

	uicontrol(...
	'Parent',ep14,...
	'Units','normalized',...
	'FontSize',10,...
	'HorizontalAlignment','left',...
	'Position',[0.11284046692607 0.939 0.35408560311284 0.029535864978903],...
	'String','Color',...
	'Style','text',...
	'Tag','c2acolorboxlabel');

	% pick color
	uicontrol(...
	'Parent',ep14,...
	'Units','normalized',...
	'FontSize',10,...
	'Position',[0.2 0.939-0.06 0.6 0.0421940928270042],...
	'String','Pick Color',...
	'TooltipString','Interactively select a color from the image',...
	'Tag','c2apickbutton',...
	'callback',{@setparam,'c2abutton'});


	

	%% COLLECT HANDLES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% all child object handles in figure 
	handles = guihandles(h1);
	% these get catted in reverse order, so flip to avoid confusion
	handles.chbox = fliplr(handles.chbox);
	handles.channellabel = fliplr(handles.channellabel);
	handles.chslider = fliplr(handles.chslider);
	handles.chminlabel = fliplr(handles.chminlabel);
	handles.chmaxlabel = fliplr(handles.chmaxlabel);
	handles.chmaxbox = fliplr(handles.chmaxbox);
	handles.chinvertcheckbox = fliplr(handles.chinvertcheckbox);
	handles.lvbox = fliplr(handles.lvbox);
	handles.levellabel = fliplr(handles.levellabel);
	handles.lvslider = fliplr(handles.lvslider);
	handles.lvminlabel = fliplr(handles.lvminlabel);
	handles.lvmaxlabel = fliplr(handles.lvmaxlabel);
	
end

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function modemenu_CBF(objh,~)
	thismode = get(objh,'value');
	whichpanel = find(strcmp(msrgb,methodstrings{thismode}));
	for m = 1:length(panels)
		if m ~= whichpanel
			set(panels(m),'visible','off')
		else
			set(panels(m),'visible','on')
		end
	end

	switch methodstrings{thismode}
		case 'adjust color'
			resetparams();
			setchannellabels();
			hidesliderblocks();
		case 'levels'
			updatehistogram();
			updatelvsliders(1);
	end
	
	updatedisplay(inpict,'reset');
	incrementpreview();
end


% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function setparam(objh,~,param,idx)
	switch param			
		case 'meanlinesmode'
			meanlinesmode = get(objh,'value');
			
		case 'mlorientation'
			mlorientation = get(objh,'value');
			
		case 'selectedtweakmode'
			selectedtweakmode = get(objh,'value');
			resetparams();
			setchannellabels();
			
		case 'tweaklegacy'
			legacytweak = get(objh,'value');
			resetparams();
			setchannellabels();
			hidesliderblocks();
			setparam([],[],'resetallchans',[]);
			
		case 'chval' % channel edit box
			% here, idx is the slider index
			chan = chanidx(idx);
			val = str2double(get(objh,'string'));
			if isoffset(chan)
				if ishue(chan)
					val = imclamp(val,[-0.5 0.5]);
				else
					val = imclamp(val,[-1 1]);
				end
			else
				% this really shouldn't be a unique case for non-hue
				% hue scale slider/box should be disabled
				% all scale boxes should accept positive values only
				% use the checkbox for inversion!
				val = imclamp(val,[0 100]); % some arbitrary max for sake of sanity
				if cvecinv(chan)
					cvec(chan) = -val;
				else 
					cvec(chan) = val;
				end
			end
			if val > cvecmax(chan)
				cvecmax(chan) = val;
			end
			% update the box since it needs to show clamping behavior
			set(handles.chbox(idx),'string',num2str(val));
			updatesliders(idx)
			
		case 'chvalslider'
			val = get(objh,'value');
			% here, idx is the slider index
			chan = chanidx(idx);
			
			% abs() used here because in imtweak(), scale params may be negative
			% but the sign is purely a flag, not part of the factor
			% in the context of immodify(), this flag is controlled by the checkbox
			% so the values in the edit box and slider are all positive
			if ishue(idx)
				set(handles.chbox(idx),'string',num2str(val));
			else
				set(handles.chbox(idx),'string',num2str(abs(val)));
			end
			if cvecinv(chan)
				cvec(chan) = -val;
			else 
				cvec(chan) = val;
			end	
			updatesliders(idx)
			
		case 'channelmax'
			chan = chanidx(idx);
			cvecmax(chan) = abs(str2double(get(objh,'string')));
			updatesliders(idx)
			
		case 'invertchannel'
			chan = chanidx(idx);
			cvecinv(chan) = get(handles.chinvertcheckbox(idx),'value');
			if cvecinv(chan) % make extra-sure shit doesn't get desynced
				cvec(chan) = -abs(cvec(chan));
			else
				cvec(chan) = abs(cvec(chan));
			end
			
		case 'resetallchans'
			cvec = [1 1 1; 0 0 0];
			cvecinv = [0 0 0; 0 0 0];
			cmax = 2;
			cvecmax = [cmax*[1 1 1]; 1 1 1];
			if legacytweak == 1; nc = 3; else; nc = 6; end
			for c = 1:nc
				initsliders(c);
			end
			
		case 'levelval'
			val = str2double(get(objh,'string'));
			if idx == 5
				lvvec(idx) = max(val,0);
				if val > gammamax
					gammamax = val;
				end
			elseif idx == 6
				lvvec(idx) = max(val,0);
				if val > contrastmax
					contrastmax = val;
				end
			else
				lvvec(idx) = max(min(val,1),0);
			end
			updatelvsliders(idx)
			
		case 'levelslider'
			val = get(objh,'value');
			set(handles.lvbox(idx),'string',num2str(val));
			lvvec(idx) = val;
			updatelvsliders(idx)
			
		case 'gammamax'
			gammamax = abs(str2double(get(objh,'string')));
			updatelvsliders(5)
			
		case 'contrastmax'
			contrastmax = abs(str2double(get(objh,'string')));
			updatelvsliders(6)
			
		case 'autolevel'
			tol = 0.001;
			mode = imadjustmodestrings{selectedimadjustmode};
			switch mode
				case 'RGB'
					lvvec(1:2) = mean(stretchlimFB(inpict(:,:,1:3),tol),2)';
				case 'HSL'
					lvvec(1:2) = stretchlimFB(inpictlch(:,:,3),tol)';
				case 'LCHab'
					lvvec(1:2) = stretchlimFB(inpictlch(:,:,1)/100,tol)';
				case 'Hue'
					lvvec(1:2) = stretchlimFB(inpictlch(:,:,1)/360,tol)';
				case 'Chroma'
					templch = rgb2lch(inpict(:,:,1:3),'lab');
					adjustedC = templch(:,:,2)/100;
					limits = stretchlimFB(adjustedC,tol)';
					limidx = find(adjustedC >= limits(2),1);
					adjustedS = inpictlch(:,:,2)/100;
					lvvec(1:2) = [0 adjustedS(limidx)];
				case 'I'
					lvvec(1:2) = stretchlimFB(inpict(:,:,1),tol)';
			end
			lvvec(3:6) = [0 1 1 1];
			for c = 1:6
				set(handles.lvbox(c),'string',num2str(lvvec(c)));
				updatelvsliders(c)
			end
			
		case 'resetlevel'
			lvvec = [0 1 0 1 1 1];
			for c = 1:6
				set(handles.lvbox(c),'string',num2str(lvvec(c)));
				updatelvsliders(c)
			end
			
		case 'selectedimadjustmode'
			selectedimadjustmode = get(objh,'value');
			mode = imadjustmodestrings{selectedimadjustmode};
			switch mode
				case 'HS(L)'
					inpictlch = rgb2hsl(inpict(:,:,1:3));
				case '(L)CHab'
					inpictlch = rgb2lch(inpict(:,:,1:3),'lab');
				case {'Hue','Chroma'}
					inpictlch = rgb2husl(inpict(:,:,1:3),'lab');
			end
			updatehistogram();
			updatelvsliders(1);
			
		case 'selectedblurmode'
			selectedblurmode = get(objh,'value');
			mode = blurmodestrings{selectedblurmode};
			if ismember(mode,thickblurmodes)
				set(handles.blurthickbox,'enable','on')
				set(handles.blurthicklabel,'enable','on')
			else
				set(handles.blurthickbox,'enable','off')
				set(handles.blurthicklabel,'enable','off')
			end
		
		case 'blursize'
			blursize = str2num(get(objh,'string'));
			
		case 'blurangle'
			blurangle = str2double(get(objh,'string'));	
			
		case 'blurthick'
			blurthick = str2double(get(objh,'string'));
			
		case 'selectedblurinterp'
			selectedblurinterp = get(objh,'value');
			
		case 'fliphoriz'
			fliphoriz = get(objh,'value');
		case 'flipvert'
			flipvert = get(objh,'value');
		case 'tmblursize'
			tmblursize = str2double(get(objh,'string'));
		case 'tmbluropacity'
			tmbluropacity = str2double(get(objh,'string'));
		case 'tmblendopacity'
			tmblendopacity = str2double(get(objh,'string'));
		case 'tmblendamount'
			tmblendamount = str2double(get(objh,'string'));
		case 'tmblendmode'
			tmblendmode = get(objh,'value');
		case 'blockifymode'
			selectedmode = get(objh,'value');
			blockifymode = blockifymodestrings{selectedmode};
		case 'blockifypixsize'
			blockifypixsize = str2num(get(objh,'string'));
		case 'shuffletiles'
			shuffletiles = str2num(get(objh,'string'));
			shuffletiles = shuffletiles(shuffletiles ~= 0);
			if numel(shuffletiles) == 1
				shuffletiles = [1 1]*shuffletiles;
				set(handles.shuffletilesbox,'string',mat2str(shuffletiles));
			end
		case 'shufflergb'
			shufflergb = get(objh,'value');
		case 'glasstiling'
			glasstiling = str2num(get(objh,'string'));
			glasstiling = glasstiling(glasstiling ~= 0);
			if numel(glasstiling) == 1
				glasstiling = [1 1]*glasstiling;
				set(handles.gttilingbox,'string',mat2str(glasstiling));
			end
		case 'dithermode'
			selectedmode = get(objh,'value');
			dithermode = dithermodestrings{selectedmode};
			switch dithermode
				case {'Zhou-Fang','Floyd-Steinberg','White Noise','Blue Noise'}
					set(handles.bayersizebox,'visible','off')
					set(handles.bayersizelabel,'visible','off')
					set(handles.aodkbox,'visible','off')
					set(handles.aodklabel,'visible','off')
					set(handles.aodindexmenu,'visible','off')
					set(handles.aodindtfmenu,'visible','off')
					set(handles.aodindinvcheckbox,'visible','off')
					set(handles.ldlevelsbox,'visible','off')
					set(handles.ldlevelslabel,'visible','off')
					set(handles.ldlengthbox,'visible','off')
					set(handles.ldlengthlabel,'visible','off')
					set(handles.ldrampmenu,'visible','off')
					set(handles.ldaxismenu,'visible','off')
					set(handles.ldpatternmenu,'visible','off')
					set(handles.ldradiusbox,'visible','off')
					set(handles.ldradiuslabel,'visible','off')
					set(handles.ldnoisebox,'visible','off')
					set(handles.ldnoiselabel,'visible','off')
				case 'Bayer'
					set(handles.bayersizebox,'visible','on')
					set(handles.bayersizelabel,'visible','on')
					set(handles.aodkbox,'visible','off')
					set(handles.aodklabel,'visible','off')
					set(handles.aodindexmenu,'visible','off')
					set(handles.aodindtfmenu,'visible','off')
					set(handles.aodindinvcheckbox,'visible','off')
					set(handles.ldlevelsbox,'visible','off')
					set(handles.ldlevelslabel,'visible','off')
					set(handles.ldlengthbox,'visible','off')
					set(handles.ldlengthlabel,'visible','off')
					set(handles.ldrampmenu,'visible','off')
					set(handles.ldaxismenu,'visible','off')
					set(handles.ldpatternmenu,'visible','off')
					set(handles.ldradiusbox,'visible','off')
					set(handles.ldradiuslabel,'visible','off')
					set(handles.ldnoisebox,'visible','off')
					set(handles.ldnoiselabel,'visible','off')
				case 'Arbitrary Ordered'
					set(handles.bayersizebox,'visible','off')
					set(handles.bayersizelabel,'visible','off')
					set(handles.aodkbox,'visible','on')
					set(handles.aodklabel,'visible','on')
					set(handles.aodindexmenu,'visible','on')
					set(handles.aodindtfmenu,'visible','on')
					set(handles.aodindinvcheckbox,'visible','on')
					set(handles.ldlevelsbox,'visible','off')
					set(handles.ldlevelslabel,'visible','off')
					set(handles.ldlengthbox,'visible','off')
					set(handles.ldlengthlabel,'visible','off')
					set(handles.ldrampmenu,'visible','off')
					set(handles.ldaxismenu,'visible','off')
					set(handles.ldpatternmenu,'visible','off')
					set(handles.ldradiusbox,'visible','off')
					set(handles.ldradiuslabel,'visible','off')
					set(handles.ldnoisebox,'visible','off')
					set(handles.ldnoiselabel,'visible','off')
				case 'Line'
					set(handles.bayersizebox,'visible','off')
					set(handles.bayersizelabel,'visible','off')
					set(handles.aodkbox,'visible','off')
					set(handles.aodklabel,'visible','off')
					set(handles.aodindexmenu,'visible','off')
					set(handles.aodindtfmenu,'visible','off')
					set(handles.aodindinvcheckbox,'visible','off')
					set(handles.ldlevelsbox,'visible','on')
					set(handles.ldlevelslabel,'visible','on')
					set(handles.ldlengthbox,'visible','on')
					set(handles.ldlengthlabel,'visible','on')
					set(handles.ldrampmenu,'visible','on')
					set(handles.ldaxismenu,'visible','on')
					set(handles.ldpatternmenu,'visible','on')
					set(handles.ldradiusbox,'visible','on')
					set(handles.ldradiuslabel,'visible','on')
					set(handles.ldnoisebox,'visible','on')
					set(handles.ldnoiselabel,'visible','on')
			end
		case 'bayersize'
			bayersize = str2double(get(objh,'string'));
		case 'aodkfactor'
			aodkfactor = str2double(get(objh,'string'));
		case 'aodindex'
			aodindex = get(objh,'value');
		case 'aodindtf'
			aodindtf = get(objh,'value');
		case 'aodindinv'
			aodindinv = get(objh,'value');
		case 'ldlevels'
			ldlevels = str2double(get(objh,'string'));
		case 'ldlength'
			ldlength = str2double(get(objh,'string'));
		case 'ldramp'
			ldramp = get(objh,'value');
		case 'ldaxis'
			ldaxis = get(objh,'value');
		case 'ldpattern'
			ldpattern = get(objh,'value');
		case 'ldradius'
			ldradius = str2double(get(objh,'string'));
		case 'ldnoise'
			ldnoise = str2double(get(objh,'string'));
		case 'eoldir'
			eoldir = get(objh,'value');
		case 'eolratio'
			eolratio = str2num(get(objh,'string'));
			eolratio = eolratio(eolratio ~= 0);
			if numel(eolratio) == 1
				eolratio = [1 1]*eolratio;
				set(handles.eolratiobox,'string',mat2str(eolratio));
			end
		case 'eoloffset'
			eoloffset = str2double(get(objh,'string'));
		case 'abcolor'
			abcolor = str2num(get(objh,'string'));
			if numel(abcolor) == 0; abcolor = 0; end
		case 'abwidth'
			abwidth = str2num(get(objh,'string'));
		case 'cbwidth'
			cbwidth = str2num(get(objh,'string'));
			if any(isnan(cbwidth))
				set(handles.cbautomodemenu,'enable','on')
				set(handles.cbthresholdbox,'enable','on')
				set(handles.cbchansbox,'enable','on')
			else
				set(handles.cbautomodemenu,'enable','off')
				set(handles.cbthresholdbox,'enable','off')
				set(handles.cbchansbox,'enable','off')
			end
		case 'cbthreshold'
			cbthreshold = str2double(get(objh,'string'));	
		case 'cbchans'
			cbchans = str2num(get(objh,'string'));
		case 'cbautomode'
			cbautomode = get(objh,'value');
		case 'c2acolor'
			c2acolor = str2num(get(objh,'string'));
			if numel(c2acolor) > numimchans
				c2acolor = c2acolor(1:numimchans);
				set(handles.c2acolorbox,'string',mat2str(c2acolor))
			elseif numel(c2acolor) ~= 0 && numel(c2acolor) < numimchans
				c2acolor = [c2acolor repmat(c2acolor(end),[1 numimchans-numel(c2acolor)])];
				set(handles.c2acolorbox,'string',mat2str(c2acolor))
			end
		case 'c2abutton'
			if invert
				c2acolor = colorpicker(inpict,'singlepoint','invert');
			else
				c2acolor = colorpicker(inpict,'singlepoint');
			end
			c2acolor = c2acolor(1:numimchans);
			set(handles.c2acolorbox,'string',mat2str(c2acolor))
	end
	incrementpreview();
end

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function setchannellabels()
	% get hue flags
	ishue = TWMprops{selectedtweakmode,6};
	
	% set slider labels
	if legacytweak==1
		% legacy mode
		chanidx = TWMprops{selectedtweakmode,5};
		slabels = TWMprops{selectedtweakmode,3};
		for sl = 1:3
			set(handles.channellabel(sl),'string',slabels{sl})
			initsliders(sl);
		end
	else
		% full mode
		chanidx = [1 3 5 2 4 6];
		slabels = TWMprops{selectedtweakmode,4};
		for sl = 1:3
			set(handles.channellabel(sl),'string',[slabels{sl} ' scale'])
			set(handles.channellabel(sl+3),'string',[slabels{sl} ' offset'])
			initsliders(sl)
			initsliders(sl+3)
		end
	end
end

function initsliders(slider)
	% slider is the slider number, not the element of the cvec
	chan = chanidx(slider); % this is the actual chan or element of cvec
	if legacytweak == 1
		onwhenlegacy = 'on';
		offwhenlegacy = 'off';
	else
		onwhenlegacy = 'off';
		offwhenlegacy = 'on';
	end
	if ishue(chan) && isoffset(chan) % normal hue adjustment
		if abs(cvec(chan)) > 0.5
			cvec(chan) = 0; % reset if prior setting was out-of-range
		end
		%disp('hue offset')
		set(handles.chbox(slider),'visible','on');
		set(handles.chminlabel(slider),'visible','on');
		set(handles.chmaxlabel(slider),'visible','on');
		set(handles.chmaxbox(slider),'visible','off');
		set(handles.chinvertcheckbox(slider),'visible','off');
		set(handles.chslider(slider),'enable','on');
		set(handles.chminlabel(slider),'string','-0.5');
		set(handles.chmaxlabel(slider),'string','0.5');
		set(handles.chslider(slider),'min',-0.5,'max',0.5,'value',cvec(chan));
	elseif isoffset(chan) % is non-hue offset
		if abs(cvec(chan)) > 1
			cvec(chan) = 0; % reset if prior setting was out-of-range
		end
		%disp('offset')
		set(handles.chbox(slider),'visible',offwhenlegacy);
		set(handles.chminlabel(slider),'visible',offwhenlegacy);
		set(handles.chmaxlabel(slider),'visible',offwhenlegacy);
		set(handles.chmaxbox(slider),'visible','off');
		set(handles.chinvertcheckbox(slider),'visible','off');
		set(handles.chslider(slider),'enable',offwhenlegacy);
		set(handles.chminlabel(slider),'string','-1');
		set(handles.chmaxlabel(slider),'string','1');
		set(handles.chslider(slider),'min',-1,'max',1,'value',cvec(chan));
	elseif ishue(chan) % is hue scale channel
		%disp('hue scale')
		set(handles.chbox(slider),'visible','off');
		set(handles.chminlabel(slider),'visible','off');
		set(handles.chmaxlabel(slider),'visible','off');
		set(handles.chmaxbox(slider),'visible','off');
		set(handles.chinvertcheckbox(slider),'visible',offwhenlegacy);
		set(handles.chslider(slider),'enable','off');
		set(handles.chslider(slider),'min',0,'max',1,'value',0);
	else % is non-hue scale channel
		%disp('scale')
		set(handles.chbox(slider),'visible','on');
		set(handles.chminlabel(slider),'visible','on');
		set(handles.chmaxlabel(slider),'visible','off');
		set(handles.chmaxbox(slider),'visible','on');
		set(handles.chslider(slider),'enable','on');
		set(handles.chinvertcheckbox(slider),'visible','on');
		set(handles.chminlabel(slider),'string','0');
		set(handles.chmaxlabel(slider),'string',num2str(cmax));
		set(handles.chmaxbox(slider),'string',num2str(cvecmax(chan)));
		set(handles.chslider(slider),'min',0,'max',cvecmax(chan),'value',abs(cvec(chan)));
	end
	
	set(handles.chinvertcheckbox(slider),'value',cvecinv(chan));
	set(handles.chbox(slider),'string',num2str(cvec(chan)));
end

function hidesliderblocks()
	if legacytweak==1
		viz = 'off';		
	else
		viz = 'on';
	end
	for slider = 4:6
		set(handles.channellabel(slider),'visible',viz);
		set(handles.chbox(slider),'visible',viz);
		set(handles.chminlabel(slider),'visible',viz);
		set(handles.chmaxlabel(slider),'visible',viz);
		set(handles.chmaxbox(slider),'visible',viz);
		set(handles.chslider(slider),'visible',viz);
		set(handles.chinvertcheckbox(slider),'visible',viz);
	end
end

function resetparams()
	thistweakmode = tweakmodestrings{selectedtweakmode};
	if thistweakmode(1) == 'h'
		transition(2) = 1; % polar Hxx
	elseif thistweakmode(3) == 'h'
		transition(2) = 2; % polar xxH
	elseif strcmp(thistweakmode,'rgb')
		transition(2) = 3; % corner-centered rectangular
	else
		transition(2) = 4; % centered rectangular
	end
	if lasttweakmode(1) == 'h'
		transition(1) = 1; % polar Hxx
	elseif lasttweakmode(3) == 'h'
		transition(1) = 2; % polar xxH
	elseif strcmp(lasttweakmode,'rgb')
		transition(1) = 3; % corner-centered rectangular
	else
		transition(1) = 4; % centered rectangular
	end
	
	% reset params based on current and prior modes
	if all(transition == [1 2]) || all(transition == [2 1])
		% flip if Hxx to xxH or vice-versa
		cvec = fliplr(cvec);
		cvecmax = fliplr(cvecmax);
		cvecinv = fliplr(cvecinv);
	elseif any(transition == 3) && any(transition ~= 3)
		cvec = [1 1 1; 0 0 0];
		cvecmax = [cmax*[1 1 1]; 1 1 1];
		cvecinv = [0 0 0; 0 0 0];
	else
		% keep vectors in when switching between centered-rectangular modes (e.g. LAB)
	end
	lasttweakmode = thistweakmode;
end

function updatesliders(slider)
	channel = chanidx(slider);
	if ishue(channel)
		set(handles.chslider(slider),'value',cvec(channel));
	elseif isoffset(channel)
		set(handles.chslider(slider),'max',cvecmax(channel));
		set(handles.chslider(slider),'value',cvec(channel));
	else
		set(handles.chslider(slider),'max',cvecmax(channel));
		set(handles.chslider(slider),'value',abs(cvec(channel)));
	end
	set(handles.chmaxbox(slider),'string',num2str(cvecmax(channel)));
end

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function updatelvsliders(channel)
	set(handles.lvslider(channel),'value',lvvec(channel));

	if channel == 5
		set(handles.lvslider(channel),'max',gammamax);
		set(handles.gammamaxbox,'string',num2str(gammamax));
	elseif channel == 6
		set(handles.lvslider(channel),'max',contrastmax);
		set(handles.contrastmaxbox,'string',num2str(contrastmax));
	end
	
	lvvec(1) = min(lvvec(1),1-eps);
	lvvec(2) = max(lvvec(2),eps);
	
	cla(handles.imadjustaxes)
		
	% end bar centers are normally on 0,1, and disappear on redraw due to xlim=[0 1]
	% split bars and display half-bars on ends so that plot doesn't die
	st = 0.05;
	bins = linspace(st/2,1-st/2,numel(hc));

 	a = bar(handles.imadjustaxes,bins,hc/max(hc),'hist'); hold on;
	set(a,'edgealpha',0,'facealpha',0.25);	
	
	inc = 0:0.01:1;
	outc = imadjustFB(inc,[lvvec(1);lvvec(2)],[lvvec(3);lvvec(4)],lvvec(5));
	outc = stretchcurve(outc,lvvec(6));
	plot(inc,outc,'parent',handles.imadjustaxes); 
	set(handles.imadjustaxes,'xlim',[0 1],'ylim',[0 1],'xticklabel',{'0','','','','1'}, ...
		'yticklabel',{'0','','','','1'},'xtick',[0 0.25 0.5 0.75 1],'ytick',[0 0.25 0.5 0.75 1])
	set(handles.imadjustaxes,'xgrid','on','ygrid','on');
end

function updatehistogram()
	% this only recalculates bin counts
	mode = imadjustmodestrings{selectedimadjustmode};
	switch mode
		case 'RGB'
			sample = mean(inpict,3);
		case 'HS(L)'
			sample = inpictlch(:,:,3);
		case '(L)CHab'
			sample = inpictlch(:,:,1)/100;
		case 'Hue'
			sample = inpictlch(:,:,1)/360;	
		case 'Chroma'
			sample = inpictlch(:,:,2)/100;
		case 'I'
			sample = inpict;
	end
	
	bins = 0:0.05:1;
	hc = histc(reshape(sample,1,[]),bins);
	hc = kron(hc,ones(1,2)); hc = hc(2:end-1);
end

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function incrementpreview(~,~)	
	if autopreview
		previewbutton_CBF();
	end
end

function previewbutton_CBF(~,~)
	mode = methodstrings{thismode};
	switch mode
		case 'adjust color'
			protoimage = inpict;
			thiscvec = reshape(cvec(chanidx),3,[]).';
			protoimage(:,:,1:3) = imtweak(inpict(:,:,1:3),tweakmodestrings{selectedtweakmode},thiscvec);
		case 'flip'
			if fliphoriz
				protoimage = flipd(inpict,2);
			else
				protoimage = inpict;
			end
			if flipvert
				protoimage = flipd(protoimage,1);
			end
		case 'levels'
			mode = imadjustmodestrings{selectedimadjustmode};
			protoimage = inpict;
			switch mode
				case 'RGB'
					protoimage(:,:,1:3) = imadjustFB(inpict(:,:,1:3),[lvvec(1);lvvec(2)],[lvvec(3);lvvec(4)],lvvec(5));
					protoimage(:,:,1:3) = stretchcurve(protoimage(:,:,1:3),lvvec(6));
				case 'HS(L)'
					adjustedL = imadjustFB(inpictlch(:,:,3),[lvvec(1);lvvec(2)],[lvvec(3);lvvec(4)],lvvec(5));
					adjustedL = stretchcurve(adjustedL,lvvec(6));
					protoimage(:,:,1:3) = cat(3,inpictlch(:,:,1:2),adjustedL);
					protoimage(:,:,1:3) = hsl2rgb(protoimage(:,:,1:3));
				case '(L)CHab'
					adjustedL = imadjustFB(inpictlch(:,:,1)/100,[lvvec(1);lvvec(2)],[lvvec(3);lvvec(4)],lvvec(5));
					adjustedL = stretchcurve(adjustedL,lvvec(6));
					protoimage(:,:,1:3) = cat(3,adjustedL*100,inpictlch(:,:,2:3));
					protoimage(:,:,1:3) = lch2rgb(protoimage(:,:,1:3),'lab','truncatelch');
				case 'Hue'
					adjustedH = imadjustFB(inpictlch(:,:,1)/360,[lvvec(1);lvvec(2)],[lvvec(3);lvvec(4)],lvvec(5));
					adjustedH = stretchcurve(adjustedH,lvvec(6));
					protoimage(:,:,1:3) = cat(3,adjustedH*360,inpictlch(:,:,2:3));
					protoimage(:,:,1:3) = husl2rgb(protoimage(:,:,1:3),'lab');	
				case 'Chroma'
					adjustedS = imadjustFB(inpictlch(:,:,2)/100,[lvvec(1);lvvec(2)],[lvvec(3);lvvec(4)],lvvec(5));
					adjustedS = stretchcurve(adjustedS,lvvec(6));
					protoimage(:,:,1:3) = cat(3,inpictlch(:,:,1),adjustedS*100,inpictlch(:,:,3));
					protoimage(:,:,1:3) = husl2rgb(protoimage(:,:,1:3),'lab');
				case 'I'
					protoimage(:,:,1) = imadjustFB(inpict(:,:,1),[lvvec(1);lvvec(2)],[lvvec(3);lvvec(4)],lvvec(5));
					protoimage(:,:,1) = stretchcurve(protoimage(:,:,1),lvvec(6));
			end
		
		case 'blur'
			protoimage = inpict;
			fk = fkgen(blurmodestrings{selectedblurmode},blursize,'angle',blurangle, ...
				'thick',blurthick,'interpolation',blurinterpstrings{selectedblurinterp});
			protoimage = imfilterFB(protoimage,fk,'replicate');
			
		case 'tonemap'
			protoimage = inpict;
			protoimage(:,:,1:3) = tonemap(inpict(:,:,1:3),'blursize',tmblursize,'bluropacity',tmbluropacity, ...
				'blendopacity',tmblendopacity,'amount',tmblendamount,'mode',tmblendmodestrings{tmblendmode});
		
		case 'vector means & extrema'
			protoimage = inpict;
			protoimage(:,:,1:numimchans) = meanlines(inpict(:,:,1:numimchans),mlorientation, ...
				meanlinesmodestrings{meanlinesmode});
		case 'blockify'
			protoimage = inpict;
			protoimage(:,:,1:numimchans) = blockify(protoimage(:,:,1:numimchans),blockifypixsize,blockifymode);
		case 'shuffle'
			protoimage = inpict;
			if shufflergb
				protoimage(:,:,1:numimchans) = shuffle(protoimage(:,:,1:numimchans),shuffletiles,'locked');
			else
				protoimage(:,:,1:numimchans) = shuffle(protoimage(:,:,1:numimchans),shuffletiles,'independent');
			end
		case 'glass tiles'
			protoimage = inpict;
			protoimage(:,:,1:numimchans) = glasstiles(protoimage(:,:,1:numimchans),glasstiling);
		case 'dither'
			protoimage = inpict;
			switch dithermode
				case 'Zhou-Fang'
					dimage = zfdither(protoimage(:,:,1:numimchans));
				case 'Floyd-Steinberg'
					if numimchans == 3
						dimage = mono(protoimage(:,:,1:numimchans),'y');
					else
						dimage = protoimage(:,:,1);
					end
					dimage = dither(dimage);
				case 'Bayer'
					dimage = orddither(protoimage(:,:,1:numimchans),bayersize);
				case 'Arbitrary Ordered'
					indexstring = aodindexstrings{aodindex};
					switch aodindtf
						case 2
							indexstring = [indexstring '-fud'];
						case 3
							indexstring = [indexstring '-flr'];
						case 4
							indexstring = [indexstring '-tp'];	
					end
					if aodindinv
						indexstring = [indexstring '-'];	
					end
					
					if numimchans == 3
						dimage = mono(protoimage(:,:,1:numimchans),'y');
					else
						dimage = protoimage(:,:,1);
					end
					dimage = arborddither(dimage,aodkfactor,'mono',indexstring);
				case 'Line'
					dimage = linedither(protoimage(:,:,1:numimchans),'levels',ldlevels,'length',ldlength,...
						'ramp',ldrampstrings{ldramp},'axis',ldaxisstrings{ldaxis},'pattern',ldpatternstrings{ldpattern},...
						'radius',ldradius,'noiseamt',ldnoise);
				case 'Blue Noise'
					dimage = noisedither(protoimage(:,:,1:numimchans),'blue');
				case 'White Noise'
					dimage = noisedither(protoimage(:,:,1:numimchans),'white');
			end
			protoimage(:,:,1:numimchans) = repmat(dimage,[1 1 numimchans]);
		case 'erase lines'
			protoimage = eoline(inpict,eoldir,eolratio,eoloffset);
		case 'add border'
			protoimage = addborder(inpict,abwidth,abcolor,'normalized');
		case 'crop border'
			protoimage = cropborder(inpict,cbwidth,'automode',cbautomodestrings{cbautomode},'threshold',cbthreshold,'channels',cbchans);
		case 'color to alpha'
			protoimage = color2alpha(inpict,c2acolor);
	end

	updatedisplay(protoimage);
end

function R = stretchcurve(I,k)
	if k == 1
		R = I;
		return;
	end

	c = 0.5;
	mk = abs(k) < 1;
	mc = c < 0.5;
	if ~xor(mk,mc)
		pp = k; kk = k*c/(1-c);
	else
		kk = k; pp = (1-c)*k/c;
	end

	hi = I > c; lo = ~hi;
	R = zeros(size(I));
	R(lo) = 0.5*((1/c)*I(lo)).^kk;
	R(hi) = 1-0.5*((1-I(hi))*(1/(1-c))).^pp;
end

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function updatedisplay(imagetoshow,keystring)
	if ~exist('keystring','var'); keystring = ''; end
	
	h = handles.axes1;
	if strcmpi(get(h,'type'),'image')
		h = get(h,'parent');
	end

	imagetoshow = alphasafe(imagetoshow);
	if invert
		imagetoshow = 1-imagetoshow;
	end

	if strcmp(keystring,'reset')
		set(h,'xlim',[0 s(2)]+0.5,'ylim',[0 s(1)]+0.5)
	end
	
	% fetch viewport extents before clobbering them
	zoomextents = [get(h,'ylim'); get(h,'xlim')];	
	k = safeimshow(imagetoshow,h);
	
	set(k,'tag','axes1')

	if strcmp(keystring,'reset')
		% reset viewport to optimal fit
		akzoom(h) 
		
	elseif all(all(zoomextents ~= [0 1;0 1]))
		% restore last viewport
		set(h,'xlim',zoomextents(2,:),'ylim',zoomextents(1,:));
	end
	
end

function k = safeimshow(imtoshow,h)
	if hasipt()
		% IF IPT IS INSTALLED
		k = imshow(imtoshow,'border','tight','parent',h);
	else
		% IPT NOT INSTALLED
		if size(imtoshow,3) == 1
			imtoshow = repmat(imtoshow,[1 1 3]);
		end
		k = image(imtoshow,'parent',h);
		axis(h,'off','tight','image')
	end
	
	set(h,'units','pixels');
	axpos = get(h,'position');
	set(h,'units','normalized');
	
	axaspect = axpos(3)/axpos(4);
	ze = [get(h,'ylim'); get(h,'xlim')];
	zeaspect = abs(ze(2,1)-ze(2,2))/abs(ze(1,1)-ze(1,2));
	
	center = mean(ze,2);
	if zeaspect < axaspect 
		% if viewport is taller & skinnier than axes
		w = abs(ze(2,1)-ze(2,2))/zeaspect*axaspect;
		newlimit = [center(2)-(w/2) center(2)+(w/2)];
		set(h,'xlim',newlimit)
	else
		% if viewport is shorter & fatter than axes
		w = abs(ze(1,1)-ze(1,2))/axaspect*zeaspect;
		newlimit = [center(1)-(w/2) center(1)+(w/2)];
		set(h,'ylim',newlimit)
	end
end

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function commitbutton_CBF(~,~)
	if isempty(protoimage)
			previewbutton_CBF();
	end
		
	if imcomposemode
		% i don't know a better way to do this 
		% so i'm just using a dummy uicontrol object's CBF
		h = findall(0,'tag','IMCOMPOSE_GUI');
		dh = findall(h,'tag','modifierdummy');
		cb = get(dh,'callback');
		cb(dh,[],protoimage);
	elseif nonblockingmode
		wsvariablename = get(handles.exportvarbox,'String');
		if isempty(wsvariablename); return; end
		assignin('base',wsvariablename,protoimage);
	else
		varargout{1} = protoimage;
		delete(handles.IMMODIFY_GUI);
	end
end

if ~imcomposemode && ~nonblockingmode
	waitfor(handles.IMMODIFY_GUI);
end

% end main function block
end



